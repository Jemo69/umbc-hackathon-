import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  users: defineTable({
    name: v.string(),
    email: v.string(),
    tokenIdentifier: v.string(),
    passwordResetToken: v.optional(v.string()),
    passwordResetExpiry: v.optional(v.number()), // Unix timestamp
  })
    .index("by_token", ["tokenIdentifier"])
    .index("by_email", ["email"])
    .index("by_password_reset_token", ["passwordResetToken"]),
  todos: defineTable({
    userId: v.id("users"),
    title: v.string(), // Renamed from 'text' for clarity
    description: v.optional(v.string()), // Optional detailed description
    completed: v.boolean(),
    dueDate: v.optional(v.number()), // Unix timestamp for due date
    estimatedEffort: v.optional(v.number()), // Estimated time in minutes
    subject: v.optional(v.string()), // Class/Subject
    priorityScore: v.optional(v.number()), // AI-generated or user-set priority
    documentRef: v.optional(v.id("documents")), // Link to originating document
    context: v.optional(v.string()), // Link to chat context or other origin
    isGeneratedByAI: v.optional(v.boolean()), // Flag if generated by AI
    // Fields for time blocking and focus tools could be added later if needed,
    // or managed client-side with updates to the task's state.
  })
    .index("by_userId", ["userId"])
    .index("by_userId_dueDate", ["userId", "dueDate"])
    .index("by_userId_subject", ["userId", "subject"]),
  documents: defineTable({
    userId: v.id("users"),
    storageId: v.string(),
    name: v.string(),
    type: v.optional(v.string()), // pdf, image, text, etc.
    uploadedAt: v.number(),
    analysisStatus: v.optional(
      v.union(
        v.literal("pending"),
        v.literal("processing"),
        v.literal("completed"),
        v.literal("failed")
      )
    ),
    extractedData: v.optional(
      v.object({
        summary: v.optional(v.string()),
        assignments: v.optional(
          v.array(
            v.object({
              title: v.string(),
              description: v.optional(v.string()),
              dueDate: v.optional(v.number()),
              priority: v.optional(v.number()),
            })
          )
        ),
        keyConcepts: v.optional(v.array(v.string())),
        deadlines: v.optional(
          v.array(
            v.object({
              title: v.string(),
              date: v.number(),
              type: v.string(), // exam, assignment, etc.
            })
          )
        ),
        studyQuestions: v.optional(
          v.array(
            v.object({
              question: v.string(),
              answer: v.optional(v.string()),
              difficulty: v.optional(v.string()),
            })
          )
        ),
      })
    ),
    subject: v.optional(v.string()),
    tags: v.optional(v.array(v.string())),
    size: v.optional(v.number()),
  })
    .index("by_userId", ["userId"])
    .index("by_userId_subject", ["userId", "subject"]),
  chatHistory: defineTable({
    userId: v.id("users"),
    message: v.string(),
    isViewer: v.boolean(),
    timestamp: v.number(),
    messageType: v.optional(
      v.union(
        v.literal("text"),
        v.literal("tool_call"),
        v.literal("tool_result")
      )
    ),
    toolCalls: v.optional(
      v.array(
        v.object({
          functionName: v.string(),
          arguments: v.string(),
          result: v.optional(v.string()),
        })
      )
    ),
    context: v.optional(v.string()),
  }),
  notes: defineTable({
    userId: v.id("users"),
    title: v.string(),
    content: v.string(),
    subject: v.optional(v.string()),
    tags: v.array(v.string()),
    documentRef: v.optional(v.id("documents")),
    context: v.optional(v.string()),
    createdAt: v.number(),
    updatedAt: v.number(),
  })
    .index("by_userId", ["userId"])
    .index("by_userId_subject", ["userId", "subject"]),
});
